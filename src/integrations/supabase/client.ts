
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zmzmzlpemrvhwfbxticj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inptem16bHBlbXJ2aHdmYnh0aWNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY2Mzk1MDQsImV4cCI6MjA2MjIxNTUwNH0.iNyq135px-Pdch6VVA-RIFJAatx0m1lRzFUQSPHWNvs";

// Enhanced Supabase client with better connection handling and retry logic
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storageKey: 'supabase-auth',
      flowType: 'pkce', // Using PKCE flow for better OAuth security
    },
    global: {
      headers: {
        'x-retry-count': '0', // Custom header for tracking retries
      },
      fetch: (input, init) => {
        // Set a reasonable timeout to avoid hanging requests
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
        
        // Merge the abort signal with any existing signal
        const signal = controller.signal;
        const finalInit = init ? { ...init, signal } : { signal };
        
        return fetch(input, finalInit)
          .then((response) => {
            clearTimeout(timeoutId);
            return response;
          })
          .catch((error) => {
            clearTimeout(timeoutId);
            console.error('Supabase fetch error:', error);
            
            // Implement basic retry logic for network errors
            if (error.name === 'AbortError' || 
                error.name === 'TypeError' || 
                error.message.includes('network') || 
                error.message.includes('connection')) {
              
              console.log('Attempting to retry connection...');
              return Promise.reject(error); // Let Supabase handle retries
            }
            
            throw error;
          });
      }
    },
    realtime: {
      params: {
        eventsPerSecond: 2 // Rate limiting for realtime events
      }
    },
    db: {
      schema: 'public'
    }
  }
);

// Helper function to check Supabase connection status with better error handling
export const checkSupabaseConnection = async () => {
  try {
    // Simple health check query with timeout
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 second timeout
    
    const { error } = await supabase
      .from('subscription_plans')
      .select('count')
      .limit(1)
      .abortSignal(controller.signal);
    
    clearTimeout(timeoutId);
    return { connected: !error, error: error?.message };
  } catch (err) {
    console.error('Supabase connection check failed:', err);
    return { 
      connected: false, 
      error: err instanceof Error ? err.message : 'Unknown connection error',
      isTimeout: err instanceof Error && err.name === 'AbortError'
    };
  }
};

// Export the Supabase URL for use in other parts of the application
export const getSupabaseUrl = () => SUPABASE_URL;
