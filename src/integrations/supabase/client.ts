
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zmzmzlpemrvhwfbxticj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inptem16bHBlbXJ2aHdmYnh0aWNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY2Mzk1MDQsImV4cCI6MjA2MjIxNTUwNH0.iNyq135px-Pdch6VVA-RIFJAatx0m1lRzFUQSPHWNvs";

// Enhanced Supabase client with better connection handling and retry logic
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storageKey: 'supabase-auth',
      flowType: 'pkce' // Using PKCE flow for better OAuth security
    },
    global: {
      fetch: (...args) => {
        // Fixed: Properly type and use the fetch arguments
        const [url, options] = args;
        
        // Using a custom fetch with timeout to avoid hanging requests
        return fetch(url, {
          ...options,
          signal: AbortSignal.timeout(15000) // 15 second timeout
        }).catch(error => {
          console.error('Supabase fetch error:', error);
          throw error;
        });
      }
    },
    realtime: {
      params: {
        eventsPerSecond: 2 // Rate limiting for realtime events
      }
    }
  }
);

// Helper function to check Supabase connection status
export const checkSupabaseConnection = async () => {
  try {
    // Simple health check query
    const { error } = await supabase.from('subscription_plans').select('count').limit(1);
    return { connected: !error, error: error?.message };
  } catch (err) {
    console.error('Supabase connection check failed:', err);
    return { connected: false, error: err instanceof Error ? err.message : 'Unknown error' };
  }
};

// Export the Supabase URL for use in other parts of the application
export const getSupabaseUrl = () => SUPABASE_URL;
